{
  "name": "Def-schema",
  "tagline": "",
  "body": "# def-schema\r\n\r\nDefine Object schema and test or validate target object. \r\n\r\n**Important:** Only support ECMAScript 6, both node engine and browsers.\r\n\r\n\r\n#### Example: Basic\r\n\r\n```JavaScript\r\n\r\n    def(String).match(123);   // return false\r\n    def(String).match('123'); // return true\r\n \r\n    def(String).validate(123); // throw IncompatibleTypeError if not match\r\n    def(String).validate('123'); // passed with silence\r\n\r\n```\r\n\r\n`def` define a new `Schema` object. Use `match` to test type of target object, use `validate` to assert target object.\r\n\r\n`validate` is as same as `match` except it will throw exception if not match. \r\n\r\n#### Example: Object\r\n\r\n\r\n```\r\n  let Person = def({name:String, age:Number});\r\n\r\n  Person.match({name:'foo', age: 123, otherPro:'111'});   //return true\r\n  Person.match({age:123});     //return false, missing name\r\n  Person.match({name: 123});   //return false, name is not string\r\n\r\n```\r\n\r\n#### Example: Function\r\n\r\n```JavaScript\r\n  let Person = def({\r\n    name: String,\r\n    age: Number,\r\n    sayHello: Function\r\n  });\r\n\r\n  let person = {\r\n    name: 'test',\r\n    age: 123,\r\n    sayHello() {\r\n      //...\r\n    }\r\n  };\r\n\r\n  Person.match(person); // retrun true\r\n```\r\n  \r\n\r\n#### Example: Array\r\n\r\n\r\n\r\n```JavaScript\r\n  \r\n  def([]).match([1,2,'test']);  //return true\r\n  def([Number]).match([1,2,'test']); //return false\r\n  def([Number]).match([1,2,3]); //return true\r\n  def[Number,String].match([1,'test']); //return true\r\n  def[Number,String].match([1,'test',4,5]); //return true\r\n\r\n```\r\n\r\n#### Example: Combine Array and Object\r\n\r\n```JavaScript\r\n  let Person = def({\r\n    name: String\r\n    age: Number\r\n    skills: [String]\r\n  });\r\n\r\n  let person1 = {name:'foo', age:123, skill: ['js', 'java']};\r\n  let person2 = {name:'foo', age:123, skill: 'js'};\r\n\r\n  Person.match(person1); //return true;\r\n  Person.match(person2); //return false;\r\n\r\n  def([Person]).match([person1, person2]); //return false;\r\n\r\n```\r\n\r\n#### Example: Customize validator\r\n\r\n\r\n```JavaScript\r\n  let Integer = def.fn(x => def(Number).match(x) && value % 1 === 0 && value >= -2147483648 && value <= 2147483647);\r\n\r\n  Integer.match(123); //return true;\r\n  Integer.match(1.23); //return false;\r\n\r\n```\r\n\r\nHere, by define the validate function we can decided what is 'Integer' in our program.\r\n\r\n#### Example: Nest definition\r\n\r\nDefined new type by leverage existing type, I mean:\r\n\r\n```JavaScript\r\n  let Integer = def.fn(x => def(Number).match(x) && value % 1 === 0 && value >= -2147483648 && value <= 2147483647);\r\n  let Person = def({\r\n    name: String,\r\n    age: Integer\r\n  });\r\n\r\n  Person.match({name: 'foo', age:123}); //return true;\r\n  Person.match({name: 'foo', age:1.23}); //return false;\r\n\r\n});\t\r\n```\r\n\r\n#### Example: Opertional property\r\n\r\n```JavaScript\r\n  let Person = def({\r\n    name: String,\r\n    age: def.opt(Number)\r\n  });\r\n\r\n  Person.match({name:'foo', age:1234}); //return true;\r\n  Person.match({name:'foo'}); //return true;\r\n  Person.match({name:'foo', age:'bar'}); //return false;\r\n```\r\n\r\n#### Example: Other buildin functions\r\n\r\n```JavaScript\r\n  def.or(String,Number).match('hello');  //return true;\r\n  def.and({name:String},{age:Number}).match({name:'foo', age:123});  //return true;\r\n\r\n  let proto = {name:String};\r\n  let target = Object.create(proto);\r\n  def.asProto(proto).match(target);  //return true;\r\n\r\n\r\n  let Range = def.param( (x, from, to) => def(Number).match(x) && x >= from  && x <= to );\r\n\r\n  Range(1,10).match(5); //return true;\r\n  Range(1,10).match(-5); //return return false;\r\n\r\n```\r\n\r\n#### Example: Reuse definition partially\r\n\r\n```JavaScript\r\n  let Person = def({\r\n    name: {\r\n      first: String,\r\n      last: String\r\n    },\r\n    age: Number\r\n  });\r\n\r\n  Person.name.match({first:'foo', last:'bar'}); //return true\r\n  Person.name.match({first:'foo'}); //return false\r\n\r\n```\r\n\r\n\r\n#### Example: Generate random instance\r\n\r\n```JavaScript\r\n  let Person = def({\r\n    name: String,\r\n    age:Number\r\n  })\r\n\r\n  Person.random //return random instance which match definition of Person\r\n\r\n\r\n\r\n```\r\n\r\nThanks :) \r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}